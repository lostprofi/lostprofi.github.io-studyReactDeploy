{"version":3,"sources":["components/App/logo.svg","components/SearchBar/SearchBar.js","components/Weather/Weather.js","components/Venue/Venue.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","className","onSubmit","this","props","type","onChange","value","React","Component","date","Date","dayOfWeek","Weather","searchResult","name","sys","country","getDay","main","temp","feels_like","weather","description","src","icon","alt","Venue","venueInfo","location","address","categories","prefix","suffix","App","state","openWeatherAPIInfo","openWeatherKey","weatherURL","foursquareAPIInfo","foursquareUrl","clientId","clientSecret","openWeatherSearchResults","foursquareSearchResults","inputSearch","foursquareTitle","handleChange","bind","handleSubmit","getWeather","getVenue","city","fetch","then","res","ok","json","Error","networkError","console","log","message","jsonRes","setState","error","day","getDate","month","getMonth","year","getFullYear","currentDate","messege","response","groups","items","e","inputSearchVal","target","event","preventDefault","logo","map","el","key","id","venue","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91807b86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6df572c6.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./_SearchBar.scss\";\r\n\r\n\r\n\r\nexport class SearchBar extends React.Component{\r\n    \r\n    render(){\r\n        return (\r\n            \r\n            <form className = \"SearchBar\" onSubmit = {this.props.onSubmit}>\r\n                <h1 className = \"SearchBar__title\">Where do you want to land?</h1>\r\n                <div className = \"wrapper\">\r\n                    <input className = \"SearchBar__searchInput\" type = \"text\" onChange = {this.props.onChange}></input>\r\n                    <input type = \"submit\" className = \"SearchBar__searchSubmit\" value = \"Submit\"></input>\r\n                </div>\r\n            </form>\r\n            \r\n        );\r\n    }\r\n    \r\n    \r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport './_Weather.scss';\r\n\r\nlet date = new Date();\r\nlet dayOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nexport class Weather extends React.Component{\r\n    \r\n    \r\n    render(){\r\n        return (\r\n            \r\n            <section className = \"weather\">\r\n                <header className = \"weather__header\">\r\n                    <h1 className = \"weather__title\">\r\n                        {this.props.searchResult.name}, {this.props.searchResult.sys.country}\r\n                    </h1>\r\n                    <h2 className = \"weather__subtitle\">\r\n                        CURRENT WEATHER\r\n                    </h2>\r\n                </header>\r\n                \r\n                <div className = \"weather__search-result\">\r\n                    <p>{dayOfWeek[date.getDay()]}</p>\r\n                    <p>Temperature: {this.props.searchResult.main.temp} {'\\u00BA'}C</p>\r\n                    <p>Temperature feels like: {this.props.searchResult.main.feels_like} {'\\u00BA'}C</p>\r\n                    <p>Condition: {this.props.searchResult.weather[0].description} </p>\r\n                    \r\n                    <img src = {`https://openweathermap.org/img/wn/${this.props.searchResult.weather[0].icon}@2x.png`} alt = \" \"/>\r\n                </div>\r\n            \r\n            </section>\r\n        \r\n        \r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport './_Venue.scss';\r\n\r\nexport class Venue extends React.Component{\r\n    \r\n    render(){\r\n        return(\r\n                                    \r\n            <div className = \"venue__search-result\">\r\n                <h1>{this.props.venueInfo.name}</h1>\r\n                <p>Адресс: {this.props.venueInfo.location.address}</p>\r\n                <p>{this.props.venueInfo.categories[0].name}</p>\r\n                <img src = {`${this.props.venueInfo.categories[0].icon.prefix}bg_32${this.props.venueInfo.categories[0].icon.suffix}`} alt = {this.props.venueInfo.categories[0].name}/>  \r\n            </div>\r\n            \r\n           \r\n        \r\n        )\r\n    }\r\n    \r\n    \r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport logo from './logo.svg';\nimport './_App.scss';\nimport {SearchBar} from '../SearchBar/SearchBar';\nimport {Weather} from '../Weather/Weather';\nimport {Venue} from '../Venue/Venue';\n\n\n\n\nexport class App extends React.Component {\n    \n    constructor(props){\n        super(props);\n        \n        this.state = {\n            openWeatherAPIInfo: {\n                openWeatherKey: '807e356de39b752f52630cbfa917d4cd',\n                weatherURL: 'https://api.openweathermap.org/data/2.5/weather'\n            },\n            \n            foursquareAPIInfo: {\n                foursquareUrl: 'https://api.foursquare.com/v2/venues/explore',\n                clientId: 'SWARZUFB1ZITKU0MLL5V05HAVYIDBFV23IXB4XGOESGDNVYX',\n                clientSecret: 'X3J5TPVF0QEWD1YLPYND5TBPE4IHHVU1Z2DWWI0PG2A4ON3R'\n            },\n            openWeatherSearchResults: [],\n            foursquareSearchResults:[],\n            inputSearch: '',\n            foursquareTitle: 'foursquare__title'\n        }\n        \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.getWeather = this.getWeather.bind(this);\n        this.getVenue = this.getVenue.bind(this);\n        \n    }\n    \n    \n    getWeather() {\n        let city = this.state.inputSearch;\n        fetch(`${this.state.openWeatherAPIInfo.weatherURL}?&q=${city}&units=metric&APPID=${this.state.openWeatherAPIInfo.openWeatherKey}`).then(res=>{\n            if(res.ok){\n                return res.json()\n            }\n            \n            throw new Error('Request failed!')\n        }, networkError => console.log(networkError.message)).then(jsonRes=>{\n                        \n            this.setState({\n                openWeatherSearchResults: [jsonRes]\n            })\n            \n            console.log(this.state.openWeatherSearchResults[0]);\n            \n        }, error=>{\n            console.log(error)\n        })\n    }\n    \n    getVenue(){\n        let city = this.state.inputSearch;\n        \n        const currentDate=()=>{\n            let date = new Date();\n            \n            let day = date.getDate();\n            let month = date.getMonth()+1;\n            let year = date.getFullYear();\n            \n            if(day<10 || month<10){\n                return `${year}0${month}0${day}`\n            }\n            \n            else {\n                return `${year}${month}${day}`\n            } \n            \n        }\n                \n        fetch(`${this.state.foursquareAPIInfo.foursquareUrl}?client_id=${this.state.foursquareAPIInfo.clientId}&client_secret=${this.state.foursquareAPIInfo.clientSecret}&v=${currentDate()}&limit=10&near=${city}&section=food&price=1&openNow=1`).then(\n            res=>{\n                if(res.ok){\n                    return res.json();\n                }\n                \n                throw new Error('Request failed')\n            }, networkError => console.log(networkError.messege)).then(jsonRes=>{\n            \n            this.setState({\n                foursquareSearchResults: jsonRes.response.groups[0].items\n            })\n            console.log(this.state.foursquareSearchResults);\n          \n        }, error=>{\n            console.log(error)\n        })\n        \n        this.setState({foursquareTitle: 'foursquare__title foursquare__title_visible'})\n        \n    }\n    \n    handleChange(e){\n        let inputSearchVal = e.target.value;\n        this.setState({\n            \n            inputSearch: `${inputSearchVal}`\n        })    \n    }\n    \n    handleSubmit(event){\n        \n        this.getWeather(); \n        this.getVenue();\n        event.preventDefault();\n        \n    }\n     \n   render(){\n       \n        return (\n            <div className = \"app\">\n                <header>\n                    <img src = {logo} alt = \"logo\"/>\n                    <SearchBar onChange = {this.handleChange}  onSubmit = {this.handleSubmit}/>\n                    \n                    {this.state.openWeatherSearchResults.map(el=>{\n                        return <Weather key = {el.id} searchResult={el}/>\n                    })}\n                    \n                    <section className = \"foursquare\">\n                        <h1 className = {this.state.foursquareTitle}>VENUES</h1>\n                        <div className = \"foursquare__search-results\">\n                            {this.state.foursquareSearchResults.map(el=>{\n                            return <Venue key = {el.venue.id} venueInfo = {el.venue}/>\n                        })}\n                        </div>\n                    </section>          \n                </header>\n            </div>  \n        );\n    } \n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './_reset.scss';\nimport {App} from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}